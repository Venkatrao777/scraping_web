{"version":3,"file":"2491.6feaedef66afe789d1be.js?v=6feaedef66afe789d1be","mappings":"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","sources":["webpack://@jupyterlab/application-top/./node_modules/@codemirror/search/dist/index.js","webpack://@jupyterlab/application-top/./node_modules/crelt/index.js"],"sourcesContent":["import { showPanel, EditorView, getPanel, Decoration, ViewPlugin, runScopeHandlers } from '@codemirror/view';\nimport { codePointAt, fromCodePoint, codePointSize, StateEffect, StateField, EditorSelection, Facet, combineConfig, CharCategory, RangeSetBuilder, Prec, EditorState, findClusterBreak } from '@codemirror/state';\nimport elt from 'crelt';\n\nconst basicNormalize = typeof String.prototype.normalize == \"function\"\n    ? x => x.normalize(\"NFKD\") : x => x;\n/**\nA search cursor provides an iterator over text matches in a\ndocument.\n*/\nclass SearchCursor {\n    /**\n    Create a text cursor. The query is the search string, `from` to\n    `to` provides the region to search.\n    \n    When `normalize` is given, it will be called, on both the query\n    string and the content it is matched against, before comparing.\n    You can, for example, create a case-insensitive search by\n    passing `s => s.toLowerCase()`.\n    \n    Text is always normalized with\n    [`.normalize(\"NFKD\")`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/normalize)\n    (when supported).\n    */\n    constructor(text, query, from = 0, to = text.length, normalize, test) {\n        this.test = test;\n        /**\n        The current match (only holds a meaningful value after\n        [`next`](https://codemirror.net/6/docs/ref/#search.SearchCursor.next) has been called and when\n        `done` is false).\n        */\n        this.value = { from: 0, to: 0 };\n        /**\n        Whether the end of the iterated region has been reached.\n        */\n        this.done = false;\n        this.matches = [];\n        this.buffer = \"\";\n        this.bufferPos = 0;\n        this.iter = text.iterRange(from, to);\n        this.bufferStart = from;\n        this.normalize = normalize ? x => normalize(basicNormalize(x)) : basicNormalize;\n        this.query = this.normalize(query);\n    }\n    peek() {\n        if (this.bufferPos == this.buffer.length) {\n            this.bufferStart += this.buffer.length;\n            this.iter.next();\n            if (this.iter.done)\n                return -1;\n            this.bufferPos = 0;\n            this.buffer = this.iter.value;\n        }\n        return codePointAt(this.buffer, this.bufferPos);\n    }\n    /**\n    Look for the next match. Updates the iterator's\n    [`value`](https://codemirror.net/6/docs/ref/#search.SearchCursor.value) and\n    [`done`](https://codemirror.net/6/docs/ref/#search.SearchCursor.done) properties. Should be called\n    at least once before using the cursor.\n    */\n    next() {\n        while (this.matches.length)\n            this.matches.pop();\n        return this.nextOverlapping();\n    }\n    /**\n    The `next` method will ignore matches that partially overlap a\n    previous match. This method behaves like `next`, but includes\n    such matches.\n    */\n    nextOverlapping() {\n        for (;;) {\n            let next = this.peek();\n            if (next < 0) {\n                this.done = true;\n                return this;\n            }\n            let str = fromCodePoint(next), start = this.bufferStart + this.bufferPos;\n            this.bufferPos += codePointSize(next);\n            let norm = this.normalize(str);\n            if (norm.length)\n                for (let i = 0, pos = start;; i++) {\n                    let code = norm.charCodeAt(i);\n                    let match = this.match(code, pos, this.bufferPos + this.bufferStart);\n                    if (i == norm.length - 1) {\n                        if (match) {\n                            this.value = match;\n                            return this;\n                        }\n                        break;\n                    }\n                    if (pos == start && i < str.length && str.charCodeAt(i) == code)\n                        pos++;\n                }\n        }\n    }\n    match(code, pos, end) {\n        let match = null;\n        for (let i = 0; i < this.matches.length; i += 2) {\n            let index = this.matches[i], keep = false;\n            if (this.query.charCodeAt(index) == code) {\n                if (index == this.query.length - 1) {\n                    match = { from: this.matches[i + 1], to: end };\n                }\n                else {\n                    this.matches[i]++;\n                    keep = true;\n                }\n            }\n            if (!keep) {\n                this.matches.splice(i, 2);\n                i -= 2;\n            }\n        }\n        if (this.query.charCodeAt(0) == code) {\n            if (this.query.length == 1)\n                match = { from: pos, to: end };\n            else\n                this.matches.push(1, pos);\n        }\n        if (match && this.test && !this.test(match.from, match.to, this.buffer, this.bufferStart))\n            match = null;\n        return match;\n    }\n}\nif (typeof Symbol != \"undefined\")\n    SearchCursor.prototype[Symbol.iterator] = function () { return this; };\n\nconst empty = { from: -1, to: -1, match: /*@__PURE__*//.*/.exec(\"\") };\nconst baseFlags = \"gm\" + (/x/.unicode == null ? \"\" : \"u\");\n/**\nThis class is similar to [`SearchCursor`](https://codemirror.net/6/docs/ref/#search.SearchCursor)\nbut searches for a regular expression pattern instead of a plain\nstring.\n*/\nclass RegExpCursor {\n    /**\n    Create a cursor that will search the given range in the given\n    document. `query` should be the raw pattern (as you'd pass it to\n    `new RegExp`).\n    */\n    constructor(text, query, options, from = 0, to = text.length) {\n        this.text = text;\n        this.to = to;\n        this.curLine = \"\";\n        /**\n        Set to `true` when the cursor has reached the end of the search\n        range.\n        */\n        this.done = false;\n        /**\n        Will contain an object with the extent of the match and the\n        match object when [`next`](https://codemirror.net/6/docs/ref/#search.RegExpCursor.next)\n        sucessfully finds a match.\n        */\n        this.value = empty;\n        if (/\\\\[sWDnr]|\\n|\\r|\\[\\^/.test(query))\n            return new MultilineRegExpCursor(text, query, options, from, to);\n        this.re = new RegExp(query, baseFlags + ((options === null || options === void 0 ? void 0 : options.ignoreCase) ? \"i\" : \"\"));\n        this.test = options === null || options === void 0 ? void 0 : options.test;\n        this.iter = text.iter();\n        let startLine = text.lineAt(from);\n        this.curLineStart = startLine.from;\n        this.matchPos = toCharEnd(text, from);\n        this.getLine(this.curLineStart);\n    }\n    getLine(skip) {\n        this.iter.next(skip);\n        if (this.iter.lineBreak) {\n            this.curLine = \"\";\n        }\n        else {\n            this.curLine = this.iter.value;\n            if (this.curLineStart + this.curLine.length > this.to)\n                this.curLine = this.curLine.slice(0, this.to - this.curLineStart);\n            this.iter.next();\n        }\n    }\n    nextLine() {\n        this.curLineStart = this.curLineStart + this.curLine.length + 1;\n        if (this.curLineStart > this.to)\n            this.curLine = \"\";\n        else\n            this.getLine(0);\n    }\n    /**\n    Move to the next match, if there is one.\n    */\n    next() {\n        for (let off = this.matchPos - this.curLineStart;;) {\n            this.re.lastIndex = off;\n            let match = this.matchPos <= this.to && this.re.exec(this.curLine);\n            if (match) {\n                let from = this.curLineStart + match.index, to = from + match[0].length;\n                this.matchPos = toCharEnd(this.text, to + (from == to ? 1 : 0));\n                if (from == this.curLineStart + this.curLine.length)\n                    this.nextLine();\n                if ((from < to || from > this.value.to) && (!this.test || this.test(from, to, match))) {\n                    this.value = { from, to, match };\n                    return this;\n                }\n                off = this.matchPos - this.curLineStart;\n            }\n            else if (this.curLineStart + this.curLine.length < this.to) {\n                this.nextLine();\n                off = 0;\n            }\n            else {\n                this.done = true;\n                return this;\n            }\n        }\n    }\n}\nconst flattened = /*@__PURE__*/new WeakMap();\n// Reusable (partially) flattened document strings\nclass FlattenedDoc {\n    constructor(from, text) {\n        this.from = from;\n        this.text = text;\n    }\n    get to() { return this.from + this.text.length; }\n    static get(doc, from, to) {\n        let cached = flattened.get(doc);\n        if (!cached || cached.from >= to || cached.to <= from) {\n            let flat = new FlattenedDoc(from, doc.sliceString(from, to));\n            flattened.set(doc, flat);\n            return flat;\n        }\n        if (cached.from == from && cached.to == to)\n            return cached;\n        let { text, from: cachedFrom } = cached;\n        if (cachedFrom > from) {\n            text = doc.sliceString(from, cachedFrom) + text;\n            cachedFrom = from;\n        }\n        if (cached.to < to)\n            text += doc.sliceString(cached.to, to);\n        flattened.set(doc, new FlattenedDoc(cachedFrom, text));\n        return new FlattenedDoc(from, text.slice(from - cachedFrom, to - cachedFrom));\n    }\n}\nclass MultilineRegExpCursor {\n    constructor(text, query, options, from, to) {\n        this.text = text;\n        this.to = to;\n        this.done = false;\n        this.value = empty;\n        this.matchPos = toCharEnd(text, from);\n        this.re = new RegExp(query, baseFlags + ((options === null || options === void 0 ? void 0 : options.ignoreCase) ? \"i\" : \"\"));\n        this.test = options === null || options === void 0 ? void 0 : options.test;\n        this.flat = FlattenedDoc.get(text, from, this.chunkEnd(from + 5000 /* Chunk.Base */));\n    }\n    chunkEnd(pos) {\n        return pos >= this.to ? this.to : this.text.lineAt(pos).to;\n    }\n    next() {\n        for (;;) {\n            let off = this.re.lastIndex = this.matchPos - this.flat.from;\n            let match = this.re.exec(this.flat.text);\n            // Skip empty matches directly after the last match\n            if (match && !match[0] && match.index == off) {\n                this.re.lastIndex = off + 1;\n                match = this.re.exec(this.flat.text);\n            }\n            if (match) {\n                let from = this.flat.from + match.index, to = from + match[0].length;\n                // If a match goes almost to the end of a noncomplete chunk, try\n                // again, since it'll likely be able to match more\n                if ((this.flat.to >= this.to || match.index + match[0].length <= this.flat.text.length - 10) &&\n                    (!this.test || this.test(from, to, match))) {\n                    this.value = { from, to, match };\n                    this.matchPos = toCharEnd(this.text, to + (from == to ? 1 : 0));\n                    return this;\n                }\n            }\n            if (this.flat.to == this.to) {\n                this.done = true;\n                return this;\n            }\n            // Grow the flattened doc\n            this.flat = FlattenedDoc.get(this.text, this.flat.from, this.chunkEnd(this.flat.from + this.flat.text.length * 2));\n        }\n    }\n}\nif (typeof Symbol != \"undefined\") {\n    RegExpCursor.prototype[Symbol.iterator] = MultilineRegExpCursor.prototype[Symbol.iterator] =\n        function () { return this; };\n}\nfunction validRegExp(source) {\n    try {\n        new RegExp(source, baseFlags);\n        return true;\n    }\n    catch (_a) {\n        return false;\n    }\n}\nfunction toCharEnd(text, pos) {\n    if (pos >= text.length)\n        return pos;\n    let line = text.lineAt(pos), next;\n    while (pos < line.to && (next = line.text.charCodeAt(pos - line.from)) >= 0xDC00 && next < 0xE000)\n        pos++;\n    return pos;\n}\n\nfunction createLineDialog(view) {\n    let line = String(view.state.doc.lineAt(view.state.selection.main.head).number);\n    let input = elt(\"input\", { class: \"cm-textfield\", name: \"line\", value: line });\n    let dom = elt(\"form\", {\n        class: \"cm-gotoLine\",\n        onkeydown: (event) => {\n            if (event.keyCode == 27) { // Escape\n                event.preventDefault();\n                view.dispatch({ effects: dialogEffect.of(false) });\n                view.focus();\n            }\n            else if (event.keyCode == 13) { // Enter\n                event.preventDefault();\n                go();\n            }\n        },\n        onsubmit: (event) => {\n            event.preventDefault();\n            go();\n        }\n    }, elt(\"label\", view.state.phrase(\"Go to line\"), \": \", input), \" \", elt(\"button\", { class: \"cm-button\", type: \"submit\" }, view.state.phrase(\"go\")), elt(\"button\", {\n        name: \"close\",\n        onclick: () => {\n            view.dispatch({ effects: dialogEffect.of(false) });\n            view.focus();\n        },\n        \"aria-label\": view.state.phrase(\"close\"),\n        type: \"button\"\n    }, [\"×\"]));\n    function go() {\n        let match = /^([+-])?(\\d+)?(:\\d+)?(%)?$/.exec(input.value);\n        if (!match)\n            return;\n        let { state } = view, startLine = state.doc.lineAt(state.selection.main.head);\n        let [, sign, ln, cl, percent] = match;\n        let col = cl ? +cl.slice(1) : 0;\n        let line = ln ? +ln : startLine.number;\n        if (ln && percent) {\n            let pc = line / 100;\n            if (sign)\n                pc = pc * (sign == \"-\" ? -1 : 1) + (startLine.number / state.doc.lines);\n            line = Math.round(state.doc.lines * pc);\n        }\n        else if (ln && sign) {\n            line = line * (sign == \"-\" ? -1 : 1) + startLine.number;\n        }\n        let docLine = state.doc.line(Math.max(1, Math.min(state.doc.lines, line)));\n        let selection = EditorSelection.cursor(docLine.from + Math.max(0, Math.min(col, docLine.length)));\n        view.dispatch({\n            effects: [dialogEffect.of(false), EditorView.scrollIntoView(selection.from, { y: 'center' })],\n            selection,\n        });\n        view.focus();\n    }\n    return { dom };\n}\nconst dialogEffect = /*@__PURE__*/StateEffect.define();\nconst dialogField = /*@__PURE__*/StateField.define({\n    create() { return true; },\n    update(value, tr) {\n        for (let e of tr.effects)\n            if (e.is(dialogEffect))\n                value = e.value;\n        return value;\n    },\n    provide: f => showPanel.from(f, val => val ? createLineDialog : null)\n});\n/**\nCommand that shows a dialog asking the user for a line number, and\nwhen a valid position is provided, moves the cursor to that line.\n\nSupports line numbers, relative line offsets prefixed with `+` or\n`-`, document percentages suffixed with `%`, and an optional\ncolumn position by adding `:` and a second number after the line\nnumber.\n*/\nconst gotoLine = view => {\n    let panel = getPanel(view, createLineDialog);\n    if (!panel) {\n        let effects = [dialogEffect.of(true)];\n        if (view.state.field(dialogField, false) == null)\n            effects.push(StateEffect.appendConfig.of([dialogField, baseTheme$1]));\n        view.dispatch({ effects });\n        panel = getPanel(view, createLineDialog);\n    }\n    if (panel)\n        panel.dom.querySelector(\"input\").select();\n    return true;\n};\nconst baseTheme$1 = /*@__PURE__*/EditorView.baseTheme({\n    \".cm-panel.cm-gotoLine\": {\n        padding: \"2px 6px 4px\",\n        position: \"relative\",\n        \"& label\": { fontSize: \"80%\" },\n        \"& [name=close]\": {\n            position: \"absolute\",\n            top: \"0\", bottom: \"0\",\n            right: \"4px\",\n            backgroundColor: \"inherit\",\n            border: \"none\",\n            font: \"inherit\",\n            padding: \"0\"\n        }\n    }\n});\n\nconst defaultHighlightOptions = {\n    highlightWordAroundCursor: false,\n    minSelectionLength: 1,\n    maxMatches: 100,\n    wholeWords: false\n};\nconst highlightConfig = /*@__PURE__*/Facet.define({\n    combine(options) {\n        return combineConfig(options, defaultHighlightOptions, {\n            highlightWordAroundCursor: (a, b) => a || b,\n            minSelectionLength: Math.min,\n            maxMatches: Math.min\n        });\n    }\n});\n/**\nThis extension highlights text that matches the selection. It uses\nthe `\"cm-selectionMatch\"` class for the highlighting. When\n`highlightWordAroundCursor` is enabled, the word at the cursor\nitself will be highlighted with `\"cm-selectionMatch-main\"`.\n*/\nfunction highlightSelectionMatches(options) {\n    let ext = [defaultTheme, matchHighlighter];\n    if (options)\n        ext.push(highlightConfig.of(options));\n    return ext;\n}\nconst matchDeco = /*@__PURE__*/Decoration.mark({ class: \"cm-selectionMatch\" });\nconst mainMatchDeco = /*@__PURE__*/Decoration.mark({ class: \"cm-selectionMatch cm-selectionMatch-main\" });\n// Whether the characters directly outside the given positions are non-word characters\nfunction insideWordBoundaries(check, state, from, to) {\n    return (from == 0 || check(state.sliceDoc(from - 1, from)) != CharCategory.Word) &&\n        (to == state.doc.length || check(state.sliceDoc(to, to + 1)) != CharCategory.Word);\n}\n// Whether the characters directly at the given positions are word characters\nfunction insideWord(check, state, from, to) {\n    return check(state.sliceDoc(from, from + 1)) == CharCategory.Word\n        && check(state.sliceDoc(to - 1, to)) == CharCategory.Word;\n}\nconst matchHighlighter = /*@__PURE__*/ViewPlugin.fromClass(class {\n    constructor(view) {\n        this.decorations = this.getDeco(view);\n    }\n    update(update) {\n        if (update.selectionSet || update.docChanged || update.viewportChanged)\n            this.decorations = this.getDeco(update.view);\n    }\n    getDeco(view) {\n        let conf = view.state.facet(highlightConfig);\n        let { state } = view, sel = state.selection;\n        if (sel.ranges.length > 1)\n            return Decoration.none;\n        let range = sel.main, query, check = null;\n        if (range.empty) {\n            if (!conf.highlightWordAroundCursor)\n                return Decoration.none;\n            let word = state.wordAt(range.head);\n            if (!word)\n                return Decoration.none;\n            check = state.charCategorizer(range.head);\n            query = state.sliceDoc(word.from, word.to);\n        }\n        else {\n            let len = range.to - range.from;\n            if (len < conf.minSelectionLength || len > 200)\n                return Decoration.none;\n            if (conf.wholeWords) {\n                query = state.sliceDoc(range.from, range.to); // TODO: allow and include leading/trailing space?\n                check = state.charCategorizer(range.head);\n                if (!(insideWordBoundaries(check, state, range.from, range.to) &&\n                    insideWord(check, state, range.from, range.to)))\n                    return Decoration.none;\n            }\n            else {\n                query = state.sliceDoc(range.from, range.to);\n                if (!query)\n                    return Decoration.none;\n            }\n        }\n        let deco = [];\n        for (let part of view.visibleRanges) {\n            let cursor = new SearchCursor(state.doc, query, part.from, part.to);\n            while (!cursor.next().done) {\n                let { from, to } = cursor.value;\n                if (!check || insideWordBoundaries(check, state, from, to)) {\n                    if (range.empty && from <= range.from && to >= range.to)\n                        deco.push(mainMatchDeco.range(from, to));\n                    else if (from >= range.to || to <= range.from)\n                        deco.push(matchDeco.range(from, to));\n                    if (deco.length > conf.maxMatches)\n                        return Decoration.none;\n                }\n            }\n        }\n        return Decoration.set(deco);\n    }\n}, {\n    decorations: v => v.decorations\n});\nconst defaultTheme = /*@__PURE__*/EditorView.baseTheme({\n    \".cm-selectionMatch\": { backgroundColor: \"#99ff7780\" },\n    \".cm-searchMatch .cm-selectionMatch\": { backgroundColor: \"transparent\" }\n});\n// Select the words around the cursors.\nconst selectWord = ({ state, dispatch }) => {\n    let { selection } = state;\n    let newSel = EditorSelection.create(selection.ranges.map(range => state.wordAt(range.head) || EditorSelection.cursor(range.head)), selection.mainIndex);\n    if (newSel.eq(selection))\n        return false;\n    dispatch(state.update({ selection: newSel }));\n    return true;\n};\n// Find next occurrence of query relative to last cursor. Wrap around\n// the document if there are no more matches.\nfunction findNextOccurrence(state, query) {\n    let { main, ranges } = state.selection;\n    let word = state.wordAt(main.head), fullWord = word && word.from == main.from && word.to == main.to;\n    for (let cycled = false, cursor = new SearchCursor(state.doc, query, ranges[ranges.length - 1].to);;) {\n        cursor.next();\n        if (cursor.done) {\n            if (cycled)\n                return null;\n            cursor = new SearchCursor(state.doc, query, 0, Math.max(0, ranges[ranges.length - 1].from - 1));\n            cycled = true;\n        }\n        else {\n            if (cycled && ranges.some(r => r.from == cursor.value.from))\n                continue;\n            if (fullWord) {\n                let word = state.wordAt(cursor.value.from);\n                if (!word || word.from != cursor.value.from || word.to != cursor.value.to)\n                    continue;\n            }\n            return cursor.value;\n        }\n    }\n}\n/**\nSelect next occurrence of the current selection. Expand selection\nto the surrounding word when the selection is empty.\n*/\nconst selectNextOccurrence = ({ state, dispatch }) => {\n    let { ranges } = state.selection;\n    if (ranges.some(sel => sel.from === sel.to))\n        return selectWord({ state, dispatch });\n    let searchedText = state.sliceDoc(ranges[0].from, ranges[0].to);\n    if (state.selection.ranges.some(r => state.sliceDoc(r.from, r.to) != searchedText))\n        return false;\n    let range = findNextOccurrence(state, searchedText);\n    if (!range)\n        return false;\n    dispatch(state.update({\n        selection: state.selection.addRange(EditorSelection.range(range.from, range.to), false),\n        effects: EditorView.scrollIntoView(range.to)\n    }));\n    return true;\n};\n\nconst searchConfigFacet = /*@__PURE__*/Facet.define({\n    combine(configs) {\n        return combineConfig(configs, {\n            top: false,\n            caseSensitive: false,\n            literal: false,\n            regexp: false,\n            wholeWord: false,\n            createPanel: view => new SearchPanel(view),\n            scrollToMatch: range => EditorView.scrollIntoView(range)\n        });\n    }\n});\n/**\nAdd search state to the editor configuration, and optionally\nconfigure the search extension.\n([`openSearchPanel`](https://codemirror.net/6/docs/ref/#search.openSearchPanel) will automatically\nenable this if it isn't already on).\n*/\nfunction search(config) {\n    return config ? [searchConfigFacet.of(config), searchExtensions] : searchExtensions;\n}\n/**\nA search query. Part of the editor's search state.\n*/\nclass SearchQuery {\n    /**\n    Create a query object.\n    */\n    constructor(config) {\n        this.search = config.search;\n        this.caseSensitive = !!config.caseSensitive;\n        this.literal = !!config.literal;\n        this.regexp = !!config.regexp;\n        this.replace = config.replace || \"\";\n        this.valid = !!this.search && (!this.regexp || validRegExp(this.search));\n        this.unquoted = this.unquote(this.search);\n        this.wholeWord = !!config.wholeWord;\n    }\n    /**\n    @internal\n    */\n    unquote(text) {\n        return this.literal ? text :\n            text.replace(/\\\\([nrt\\\\])/g, (_, ch) => ch == \"n\" ? \"\\n\" : ch == \"r\" ? \"\\r\" : ch == \"t\" ? \"\\t\" : \"\\\\\");\n    }\n    /**\n    Compare this query to another query.\n    */\n    eq(other) {\n        return this.search == other.search && this.replace == other.replace &&\n            this.caseSensitive == other.caseSensitive && this.regexp == other.regexp &&\n            this.wholeWord == other.wholeWord;\n    }\n    /**\n    @internal\n    */\n    create() {\n        return this.regexp ? new RegExpQuery(this) : new StringQuery(this);\n    }\n    /**\n    Get a search cursor for this query, searching through the given\n    range in the given state.\n    */\n    getCursor(state, from = 0, to) {\n        let st = state.doc ? state : EditorState.create({ doc: state });\n        if (to == null)\n            to = st.doc.length;\n        return this.regexp ? regexpCursor(this, st, from, to) : stringCursor(this, st, from, to);\n    }\n}\nclass QueryType {\n    constructor(spec) {\n        this.spec = spec;\n    }\n}\nfunction stringCursor(spec, state, from, to) {\n    return new SearchCursor(state.doc, spec.unquoted, from, to, spec.caseSensitive ? undefined : x => x.toLowerCase(), spec.wholeWord ? stringWordTest(state.doc, state.charCategorizer(state.selection.main.head)) : undefined);\n}\nfunction stringWordTest(doc, categorizer) {\n    return (from, to, buf, bufPos) => {\n        if (bufPos > from || bufPos + buf.length < to) {\n            bufPos = Math.max(0, from - 2);\n            buf = doc.sliceString(bufPos, Math.min(doc.length, to + 2));\n        }\n        return (categorizer(charBefore(buf, from - bufPos)) != CharCategory.Word ||\n            categorizer(charAfter(buf, from - bufPos)) != CharCategory.Word) &&\n            (categorizer(charAfter(buf, to - bufPos)) != CharCategory.Word ||\n                categorizer(charBefore(buf, to - bufPos)) != CharCategory.Word);\n    };\n}\nclass StringQuery extends QueryType {\n    constructor(spec) {\n        super(spec);\n    }\n    nextMatch(state, curFrom, curTo) {\n        let cursor = stringCursor(this.spec, state, curTo, state.doc.length).nextOverlapping();\n        if (cursor.done) {\n            let end = Math.min(state.doc.length, curFrom + this.spec.unquoted.length);\n            cursor = stringCursor(this.spec, state, 0, end).nextOverlapping();\n        }\n        return cursor.done || cursor.value.from == curFrom && cursor.value.to == curTo ? null : cursor.value;\n    }\n    // Searching in reverse is, rather than implementing an inverted search\n    // cursor, done by scanning chunk after chunk forward.\n    prevMatchInRange(state, from, to) {\n        for (let pos = to;;) {\n            let start = Math.max(from, pos - 10000 /* FindPrev.ChunkSize */ - this.spec.unquoted.length);\n            let cursor = stringCursor(this.spec, state, start, pos), range = null;\n            while (!cursor.nextOverlapping().done)\n                range = cursor.value;\n            if (range)\n                return range;\n            if (start == from)\n                return null;\n            pos -= 10000 /* FindPrev.ChunkSize */;\n        }\n    }\n    prevMatch(state, curFrom, curTo) {\n        let found = this.prevMatchInRange(state, 0, curFrom);\n        if (!found)\n            found = this.prevMatchInRange(state, Math.max(0, curTo - this.spec.unquoted.length), state.doc.length);\n        return found && (found.from != curFrom || found.to != curTo) ? found : null;\n    }\n    getReplacement(_result) { return this.spec.unquote(this.spec.replace); }\n    matchAll(state, limit) {\n        let cursor = stringCursor(this.spec, state, 0, state.doc.length), ranges = [];\n        while (!cursor.next().done) {\n            if (ranges.length >= limit)\n                return null;\n            ranges.push(cursor.value);\n        }\n        return ranges;\n    }\n    highlight(state, from, to, add) {\n        let cursor = stringCursor(this.spec, state, Math.max(0, from - this.spec.unquoted.length), Math.min(to + this.spec.unquoted.length, state.doc.length));\n        while (!cursor.next().done)\n            add(cursor.value.from, cursor.value.to);\n    }\n}\nfunction regexpCursor(spec, state, from, to) {\n    return new RegExpCursor(state.doc, spec.search, {\n        ignoreCase: !spec.caseSensitive,\n        test: spec.wholeWord ? regexpWordTest(state.charCategorizer(state.selection.main.head)) : undefined\n    }, from, to);\n}\nfunction charBefore(str, index) {\n    return str.slice(findClusterBreak(str, index, false), index);\n}\nfunction charAfter(str, index) {\n    return str.slice(index, findClusterBreak(str, index));\n}\nfunction regexpWordTest(categorizer) {\n    return (_from, _to, match) => !match[0].length ||\n        (categorizer(charBefore(match.input, match.index)) != CharCategory.Word ||\n            categorizer(charAfter(match.input, match.index)) != CharCategory.Word) &&\n            (categorizer(charAfter(match.input, match.index + match[0].length)) != CharCategory.Word ||\n                categorizer(charBefore(match.input, match.index + match[0].length)) != CharCategory.Word);\n}\nclass RegExpQuery extends QueryType {\n    nextMatch(state, curFrom, curTo) {\n        let cursor = regexpCursor(this.spec, state, curTo, state.doc.length).next();\n        if (cursor.done)\n            cursor = regexpCursor(this.spec, state, 0, curFrom).next();\n        return cursor.done ? null : cursor.value;\n    }\n    prevMatchInRange(state, from, to) {\n        for (let size = 1;; size++) {\n            let start = Math.max(from, to - size * 10000 /* FindPrev.ChunkSize */);\n            let cursor = regexpCursor(this.spec, state, start, to), range = null;\n            while (!cursor.next().done)\n                range = cursor.value;\n            if (range && (start == from || range.from > start + 10))\n                return range;\n            if (start == from)\n                return null;\n        }\n    }\n    prevMatch(state, curFrom, curTo) {\n        return this.prevMatchInRange(state, 0, curFrom) ||\n            this.prevMatchInRange(state, curTo, state.doc.length);\n    }\n    getReplacement(result) {\n        return this.spec.unquote(this.spec.replace).replace(/\\$([$&]|\\d+)/g, (m, i) => {\n            if (i == \"&\")\n                return result.match[0];\n            if (i == \"$\")\n                return \"$\";\n            for (let l = i.length; l > 0; l--) {\n                let n = +i.slice(0, l);\n                if (n > 0 && n < result.match.length)\n                    return result.match[n] + i.slice(l);\n            }\n            return m;\n        });\n    }\n    matchAll(state, limit) {\n        let cursor = regexpCursor(this.spec, state, 0, state.doc.length), ranges = [];\n        while (!cursor.next().done) {\n            if (ranges.length >= limit)\n                return null;\n            ranges.push(cursor.value);\n        }\n        return ranges;\n    }\n    highlight(state, from, to, add) {\n        let cursor = regexpCursor(this.spec, state, Math.max(0, from - 250 /* RegExp.HighlightMargin */), Math.min(to + 250 /* RegExp.HighlightMargin */, state.doc.length));\n        while (!cursor.next().done)\n            add(cursor.value.from, cursor.value.to);\n    }\n}\n/**\nA state effect that updates the current search query. Note that\nthis only has an effect if the search state has been initialized\n(by including [`search`](https://codemirror.net/6/docs/ref/#search.search) in your configuration or\nby running [`openSearchPanel`](https://codemirror.net/6/docs/ref/#search.openSearchPanel) at least\nonce).\n*/\nconst setSearchQuery = /*@__PURE__*/StateEffect.define();\nconst togglePanel = /*@__PURE__*/StateEffect.define();\nconst searchState = /*@__PURE__*/StateField.define({\n    create(state) {\n        return new SearchState(defaultQuery(state).create(), null);\n    },\n    update(value, tr) {\n        for (let effect of tr.effects) {\n            if (effect.is(setSearchQuery))\n                value = new SearchState(effect.value.create(), value.panel);\n            else if (effect.is(togglePanel))\n                value = new SearchState(value.query, effect.value ? createSearchPanel : null);\n        }\n        return value;\n    },\n    provide: f => showPanel.from(f, val => val.panel)\n});\n/**\nGet the current search query from an editor state.\n*/\nfunction getSearchQuery(state) {\n    let curState = state.field(searchState, false);\n    return curState ? curState.query.spec : defaultQuery(state);\n}\n/**\nQuery whether the search panel is open in the given editor state.\n*/\nfunction searchPanelOpen(state) {\n    var _a;\n    return ((_a = state.field(searchState, false)) === null || _a === void 0 ? void 0 : _a.panel) != null;\n}\nclass SearchState {\n    constructor(query, panel) {\n        this.query = query;\n        this.panel = panel;\n    }\n}\nconst matchMark = /*@__PURE__*/Decoration.mark({ class: \"cm-searchMatch\" }), selectedMatchMark = /*@__PURE__*/Decoration.mark({ class: \"cm-searchMatch cm-searchMatch-selected\" });\nconst searchHighlighter = /*@__PURE__*/ViewPlugin.fromClass(class {\n    constructor(view) {\n        this.view = view;\n        this.decorations = this.highlight(view.state.field(searchState));\n    }\n    update(update) {\n        let state = update.state.field(searchState);\n        if (state != update.startState.field(searchState) || update.docChanged || update.selectionSet || update.viewportChanged)\n            this.decorations = this.highlight(state);\n    }\n    highlight({ query, panel }) {\n        if (!panel || !query.spec.valid)\n            return Decoration.none;\n        let { view } = this;\n        let builder = new RangeSetBuilder();\n        for (let i = 0, ranges = view.visibleRanges, l = ranges.length; i < l; i++) {\n            let { from, to } = ranges[i];\n            while (i < l - 1 && to > ranges[i + 1].from - 2 * 250 /* RegExp.HighlightMargin */)\n                to = ranges[++i].to;\n            query.highlight(view.state, from, to, (from, to) => {\n                let selected = view.state.selection.ranges.some(r => r.from == from && r.to == to);\n                builder.add(from, to, selected ? selectedMatchMark : matchMark);\n            });\n        }\n        return builder.finish();\n    }\n}, {\n    decorations: v => v.decorations\n});\nfunction searchCommand(f) {\n    return view => {\n        let state = view.state.field(searchState, false);\n        return state && state.query.spec.valid ? f(view, state) : openSearchPanel(view);\n    };\n}\n/**\nOpen the search panel if it isn't already open, and move the\nselection to the first match after the current main selection.\nWill wrap around to the start of the document when it reaches the\nend.\n*/\nconst findNext = /*@__PURE__*/searchCommand((view, { query }) => {\n    let { to } = view.state.selection.main;\n    let next = query.nextMatch(view.state, to, to);\n    if (!next)\n        return false;\n    let selection = EditorSelection.single(next.from, next.to);\n    let config = view.state.facet(searchConfigFacet);\n    view.dispatch({\n        selection,\n        effects: [announceMatch(view, next), config.scrollToMatch(selection.main, view)],\n        userEvent: \"select.search\"\n    });\n    selectSearchInput(view);\n    return true;\n});\n/**\nMove the selection to the previous instance of the search query,\nbefore the current main selection. Will wrap past the start\nof the document to start searching at the end again.\n*/\nconst findPrevious = /*@__PURE__*/searchCommand((view, { query }) => {\n    let { state } = view, { from } = state.selection.main;\n    let prev = query.prevMatch(state, from, from);\n    if (!prev)\n        return false;\n    let selection = EditorSelection.single(prev.from, prev.to);\n    let config = view.state.facet(searchConfigFacet);\n    view.dispatch({\n        selection,\n        effects: [announceMatch(view, prev), config.scrollToMatch(selection.main, view)],\n        userEvent: \"select.search\"\n    });\n    selectSearchInput(view);\n    return true;\n});\n/**\nSelect all instances of the search query.\n*/\nconst selectMatches = /*@__PURE__*/searchCommand((view, { query }) => {\n    let ranges = query.matchAll(view.state, 1000);\n    if (!ranges || !ranges.length)\n        return false;\n    view.dispatch({\n        selection: EditorSelection.create(ranges.map(r => EditorSelection.range(r.from, r.to))),\n        userEvent: \"select.search.matches\"\n    });\n    return true;\n});\n/**\nSelect all instances of the currently selected text.\n*/\nconst selectSelectionMatches = ({ state, dispatch }) => {\n    let sel = state.selection;\n    if (sel.ranges.length > 1 || sel.main.empty)\n        return false;\n    let { from, to } = sel.main;\n    let ranges = [], main = 0;\n    for (let cur = new SearchCursor(state.doc, state.sliceDoc(from, to)); !cur.next().done;) {\n        if (ranges.length > 1000)\n            return false;\n        if (cur.value.from == from)\n            main = ranges.length;\n        ranges.push(EditorSelection.range(cur.value.from, cur.value.to));\n    }\n    dispatch(state.update({\n        selection: EditorSelection.create(ranges, main),\n        userEvent: \"select.search.matches\"\n    }));\n    return true;\n};\n/**\nReplace the current match of the search query.\n*/\nconst replaceNext = /*@__PURE__*/searchCommand((view, { query }) => {\n    let { state } = view, { from, to } = state.selection.main;\n    if (state.readOnly)\n        return false;\n    let match = query.nextMatch(state, from, from);\n    if (!match)\n        return false;\n    let next = match;\n    let changes = [], selection, replacement;\n    let effects = [];\n    if (next.from == from && next.to == to) {\n        replacement = state.toText(query.getReplacement(next));\n        changes.push({ from: next.from, to: next.to, insert: replacement });\n        next = query.nextMatch(state, next.from, next.to);\n        effects.push(EditorView.announce.of(state.phrase(\"replaced match on line $\", state.doc.lineAt(from).number) + \".\"));\n    }\n    if (next) {\n        let off = changes.length == 0 || changes[0].from >= match.to ? 0 : match.to - match.from - replacement.length;\n        selection = EditorSelection.single(next.from - off, next.to - off);\n        effects.push(announceMatch(view, next));\n        effects.push(state.facet(searchConfigFacet).scrollToMatch(selection.main, view));\n    }\n    view.dispatch({\n        changes, selection, effects,\n        userEvent: \"input.replace\"\n    });\n    return true;\n});\n/**\nReplace all instances of the search query with the given\nreplacement.\n*/\nconst replaceAll = /*@__PURE__*/searchCommand((view, { query }) => {\n    if (view.state.readOnly)\n        return false;\n    let changes = query.matchAll(view.state, 1e9).map(match => {\n        let { from, to } = match;\n        return { from, to, insert: query.getReplacement(match) };\n    });\n    if (!changes.length)\n        return false;\n    let announceText = view.state.phrase(\"replaced $ matches\", changes.length) + \".\";\n    view.dispatch({\n        changes,\n        effects: EditorView.announce.of(announceText),\n        userEvent: \"input.replace.all\"\n    });\n    return true;\n});\nfunction createSearchPanel(view) {\n    return view.state.facet(searchConfigFacet).createPanel(view);\n}\nfunction defaultQuery(state, fallback) {\n    var _a, _b, _c, _d, _e;\n    let sel = state.selection.main;\n    let selText = sel.empty || sel.to > sel.from + 100 ? \"\" : state.sliceDoc(sel.from, sel.to);\n    if (fallback && !selText)\n        return fallback;\n    let config = state.facet(searchConfigFacet);\n    return new SearchQuery({\n        search: ((_a = fallback === null || fallback === void 0 ? void 0 : fallback.literal) !== null && _a !== void 0 ? _a : config.literal) ? selText : selText.replace(/\\n/g, \"\\\\n\"),\n        caseSensitive: (_b = fallback === null || fallback === void 0 ? void 0 : fallback.caseSensitive) !== null && _b !== void 0 ? _b : config.caseSensitive,\n        literal: (_c = fallback === null || fallback === void 0 ? void 0 : fallback.literal) !== null && _c !== void 0 ? _c : config.literal,\n        regexp: (_d = fallback === null || fallback === void 0 ? void 0 : fallback.regexp) !== null && _d !== void 0 ? _d : config.regexp,\n        wholeWord: (_e = fallback === null || fallback === void 0 ? void 0 : fallback.wholeWord) !== null && _e !== void 0 ? _e : config.wholeWord\n    });\n}\nfunction getSearchInput(view) {\n    let panel = getPanel(view, createSearchPanel);\n    return panel && panel.dom.querySelector(\"[main-field]\");\n}\nfunction selectSearchInput(view) {\n    let input = getSearchInput(view);\n    if (input && input == view.root.activeElement)\n        input.select();\n}\n/**\nMake sure the search panel is open and focused.\n*/\nconst openSearchPanel = view => {\n    let state = view.state.field(searchState, false);\n    if (state && state.panel) {\n        let searchInput = getSearchInput(view);\n        if (searchInput && searchInput != view.root.activeElement) {\n            let query = defaultQuery(view.state, state.query.spec);\n            if (query.valid)\n                view.dispatch({ effects: setSearchQuery.of(query) });\n            searchInput.focus();\n            searchInput.select();\n        }\n    }\n    else {\n        view.dispatch({ effects: [\n                togglePanel.of(true),\n                state ? setSearchQuery.of(defaultQuery(view.state, state.query.spec)) : StateEffect.appendConfig.of(searchExtensions)\n            ] });\n    }\n    return true;\n};\n/**\nClose the search panel.\n*/\nconst closeSearchPanel = view => {\n    let state = view.state.field(searchState, false);\n    if (!state || !state.panel)\n        return false;\n    let panel = getPanel(view, createSearchPanel);\n    if (panel && panel.dom.contains(view.root.activeElement))\n        view.focus();\n    view.dispatch({ effects: togglePanel.of(false) });\n    return true;\n};\n/**\nDefault search-related key bindings.\n\n - Mod-f: [`openSearchPanel`](https://codemirror.net/6/docs/ref/#search.openSearchPanel)\n - F3, Mod-g: [`findNext`](https://codemirror.net/6/docs/ref/#search.findNext)\n - Shift-F3, Shift-Mod-g: [`findPrevious`](https://codemirror.net/6/docs/ref/#search.findPrevious)\n - Mod-Alt-g: [`gotoLine`](https://codemirror.net/6/docs/ref/#search.gotoLine)\n - Mod-d: [`selectNextOccurrence`](https://codemirror.net/6/docs/ref/#search.selectNextOccurrence)\n*/\nconst searchKeymap = [\n    { key: \"Mod-f\", run: openSearchPanel, scope: \"editor search-panel\" },\n    { key: \"F3\", run: findNext, shift: findPrevious, scope: \"editor search-panel\", preventDefault: true },\n    { key: \"Mod-g\", run: findNext, shift: findPrevious, scope: \"editor search-panel\", preventDefault: true },\n    { key: \"Escape\", run: closeSearchPanel, scope: \"editor search-panel\" },\n    { key: \"Mod-Shift-l\", run: selectSelectionMatches },\n    { key: \"Mod-Alt-g\", run: gotoLine },\n    { key: \"Mod-d\", run: selectNextOccurrence, preventDefault: true },\n];\nclass SearchPanel {\n    constructor(view) {\n        this.view = view;\n        let query = this.query = view.state.field(searchState).query.spec;\n        this.commit = this.commit.bind(this);\n        this.searchField = elt(\"input\", {\n            value: query.search,\n            placeholder: phrase(view, \"Find\"),\n            \"aria-label\": phrase(view, \"Find\"),\n            class: \"cm-textfield\",\n            name: \"search\",\n            form: \"\",\n            \"main-field\": \"true\",\n            onchange: this.commit,\n            onkeyup: this.commit\n        });\n        this.replaceField = elt(\"input\", {\n            value: query.replace,\n            placeholder: phrase(view, \"Replace\"),\n            \"aria-label\": phrase(view, \"Replace\"),\n            class: \"cm-textfield\",\n            name: \"replace\",\n            form: \"\",\n            onchange: this.commit,\n            onkeyup: this.commit\n        });\n        this.caseField = elt(\"input\", {\n            type: \"checkbox\",\n            name: \"case\",\n            form: \"\",\n            checked: query.caseSensitive,\n            onchange: this.commit\n        });\n        this.reField = elt(\"input\", {\n            type: \"checkbox\",\n            name: \"re\",\n            form: \"\",\n            checked: query.regexp,\n            onchange: this.commit\n        });\n        this.wordField = elt(\"input\", {\n            type: \"checkbox\",\n            name: \"word\",\n            form: \"\",\n            checked: query.wholeWord,\n            onchange: this.commit\n        });\n        function button(name, onclick, content) {\n            return elt(\"button\", { class: \"cm-button\", name, onclick, type: \"button\" }, content);\n        }\n        this.dom = elt(\"div\", { onkeydown: (e) => this.keydown(e), class: \"cm-search\" }, [\n            this.searchField,\n            button(\"next\", () => findNext(view), [phrase(view, \"next\")]),\n            button(\"prev\", () => findPrevious(view), [phrase(view, \"previous\")]),\n            button(\"select\", () => selectMatches(view), [phrase(view, \"all\")]),\n            elt(\"label\", null, [this.caseField, phrase(view, \"match case\")]),\n            elt(\"label\", null, [this.reField, phrase(view, \"regexp\")]),\n            elt(\"label\", null, [this.wordField, phrase(view, \"by word\")]),\n            ...view.state.readOnly ? [] : [\n                elt(\"br\"),\n                this.replaceField,\n                button(\"replace\", () => replaceNext(view), [phrase(view, \"replace\")]),\n                button(\"replaceAll\", () => replaceAll(view), [phrase(view, \"replace all\")])\n            ],\n            elt(\"button\", {\n                name: \"close\",\n                onclick: () => closeSearchPanel(view),\n                \"aria-label\": phrase(view, \"close\"),\n                type: \"button\"\n            }, [\"×\"])\n        ]);\n    }\n    commit() {\n        let query = new SearchQuery({\n            search: this.searchField.value,\n            caseSensitive: this.caseField.checked,\n            regexp: this.reField.checked,\n            wholeWord: this.wordField.checked,\n            replace: this.replaceField.value,\n        });\n        if (!query.eq(this.query)) {\n            this.query = query;\n            this.view.dispatch({ effects: setSearchQuery.of(query) });\n        }\n    }\n    keydown(e) {\n        if (runScopeHandlers(this.view, e, \"search-panel\")) {\n            e.preventDefault();\n        }\n        else if (e.keyCode == 13 && e.target == this.searchField) {\n            e.preventDefault();\n            (e.shiftKey ? findPrevious : findNext)(this.view);\n        }\n        else if (e.keyCode == 13 && e.target == this.replaceField) {\n            e.preventDefault();\n            replaceNext(this.view);\n        }\n    }\n    update(update) {\n        for (let tr of update.transactions)\n            for (let effect of tr.effects) {\n                if (effect.is(setSearchQuery) && !effect.value.eq(this.query))\n                    this.setQuery(effect.value);\n            }\n    }\n    setQuery(query) {\n        this.query = query;\n        this.searchField.value = query.search;\n        this.replaceField.value = query.replace;\n        this.caseField.checked = query.caseSensitive;\n        this.reField.checked = query.regexp;\n        this.wordField.checked = query.wholeWord;\n    }\n    mount() {\n        this.searchField.select();\n    }\n    get pos() { return 80; }\n    get top() { return this.view.state.facet(searchConfigFacet).top; }\n}\nfunction phrase(view, phrase) { return view.state.phrase(phrase); }\nconst AnnounceMargin = 30;\nconst Break = /[\\s\\.,:;?!]/;\nfunction announceMatch(view, { from, to }) {\n    let line = view.state.doc.lineAt(from), lineEnd = view.state.doc.lineAt(to).to;\n    let start = Math.max(line.from, from - AnnounceMargin), end = Math.min(lineEnd, to + AnnounceMargin);\n    let text = view.state.sliceDoc(start, end);\n    if (start != line.from) {\n        for (let i = 0; i < AnnounceMargin; i++)\n            if (!Break.test(text[i + 1]) && Break.test(text[i])) {\n                text = text.slice(i);\n                break;\n            }\n    }\n    if (end != lineEnd) {\n        for (let i = text.length - 1; i > text.length - AnnounceMargin; i--)\n            if (!Break.test(text[i - 1]) && Break.test(text[i])) {\n                text = text.slice(0, i);\n                break;\n            }\n    }\n    return EditorView.announce.of(`${view.state.phrase(\"current match\")}. ${text} ${view.state.phrase(\"on line\")} ${line.number}.`);\n}\nconst baseTheme = /*@__PURE__*/EditorView.baseTheme({\n    \".cm-panel.cm-search\": {\n        padding: \"2px 6px 4px\",\n        position: \"relative\",\n        \"& [name=close]\": {\n            position: \"absolute\",\n            top: \"0\",\n            right: \"4px\",\n            backgroundColor: \"inherit\",\n            border: \"none\",\n            font: \"inherit\",\n            padding: 0,\n            margin: 0\n        },\n        \"& input, & button, & label\": {\n            margin: \".2em .6em .2em 0\"\n        },\n        \"& input[type=checkbox]\": {\n            marginRight: \".2em\"\n        },\n        \"& label\": {\n            fontSize: \"80%\",\n            whiteSpace: \"pre\"\n        }\n    },\n    \"&light .cm-searchMatch\": { backgroundColor: \"#ffff0054\" },\n    \"&dark .cm-searchMatch\": { backgroundColor: \"#00ffff8a\" },\n    \"&light .cm-searchMatch-selected\": { backgroundColor: \"#ff6a0054\" },\n    \"&dark .cm-searchMatch-selected\": { backgroundColor: \"#ff00ff8a\" }\n});\nconst searchExtensions = [\n    searchState,\n    /*@__PURE__*/Prec.low(searchHighlighter),\n    baseTheme\n];\n\nexport { RegExpCursor, SearchCursor, SearchQuery, closeSearchPanel, findNext, findPrevious, getSearchQuery, gotoLine, highlightSelectionMatches, openSearchPanel, replaceAll, replaceNext, search, searchKeymap, searchPanelOpen, selectMatches, selectNextOccurrence, selectSelectionMatches, setSearchQuery };\n","export default function crelt() {\n  var elt = arguments[0]\n  if (typeof elt == \"string\") elt = document.createElement(elt)\n  var i = 1, next = arguments[1]\n  if (next && typeof next == \"object\" && next.nodeType == null && !Array.isArray(next)) {\n    for (var name in next) if (Object.prototype.hasOwnProperty.call(next, name)) {\n      var value = next[name]\n      if (typeof value == \"string\") elt.setAttribute(name, value)\n      else if (value != null) elt[name] = value\n    }\n    i++\n  }\n  for (; i < arguments.length; i++) add(elt, arguments[i])\n  return elt\n}\n\nfunction add(elt, child) {\n  if (typeof child == \"string\") {\n    elt.appendChild(document.createTextNode(child))\n  } else if (child == null) {\n  } else if (child.nodeType != null) {\n    elt.appendChild(child)\n  } else if (Array.isArray(child)) {\n    for (var i = 0; i < child.length; i++) add(elt, child[i])\n  } else {\n    throw new RangeError(\"Unsupported child node: \" + child)\n  }\n}\n"],"names":["basicNormalize","String","prototype","normalize","x","SearchCursor","constructor","text","query","from","to","length","test","this","value","done","matches","buffer","bufferPos","iter","iterRange","bufferStart","peek","next","codePointAt","pop","nextOverlapping","str","fromCodePoint","start","codePointSize","norm","i","pos","code","charCodeAt","match","end","index","keep","splice","push","Symbol","iterator","empty","exec","baseFlags","unicode","RegExpCursor","options","curLine","MultilineRegExpCursor","re","RegExp","ignoreCase","startLine","lineAt","curLineStart","matchPos","toCharEnd","getLine","skip","lineBreak","slice","nextLine","off","lastIndex","flattened","WeakMap","FlattenedDoc","get","doc","cached","flat","sliceString","set","cachedFrom","chunkEnd","validRegExp","source","_a","line","createLineDialog","view","state","selection","main","head","number","input","class","name","dom","onkeydown","event","keyCode","preventDefault","dispatch","effects","dialogEffect","of","focus","go","onsubmit","phrase","type","onclick","sign","ln","cl","percent","col","pc","lines","Math","round","docLine","max","min","EditorSelection","cursor","EditorView","scrollIntoView","y","StateEffect","define","dialogField","StateField","create","update","tr","e","is","provide","f","showPanel","val","gotoLine","panel","getPanel","field","appendConfig","baseTheme$1","querySelector","select","baseTheme","padding","position","fontSize","top","bottom","right","backgroundColor","border","font","defaultHighlightOptions","highlightWordAroundCursor","minSelectionLength","maxMatches","wholeWords","highlightConfig","Facet","combine","combineConfig","a","b","highlightSelectionMatches","ext","defaultTheme","matchHighlighter","matchDeco","Decoration","mark","mainMatchDeco","insideWordBoundaries","check","sliceDoc","CharCategory","Word","insideWord","ViewPlugin","fromClass","decorations","getDeco","selectionSet","docChanged","viewportChanged","conf","facet","sel","ranges","none","range","word","wordAt","charCategorizer","len","deco","part","visibleRanges","v","selectWord","newSel","map","mainIndex","eq","findNextOccurrence","fullWord","cycled","some","r","selectNextOccurrence","searchedText","addRange","searchConfigFacet","configs","caseSensitive","literal","regexp","wholeWord","createPanel","SearchPanel","scrollToMatch","search","config","searchExtensions","SearchQuery","replace","valid","unquoted","unquote","_","ch","other","RegExpQuery","StringQuery","getCursor","st","EditorState","regexpCursor","stringCursor","QueryType","spec","undefined","toLowerCase","stringWordTest","categorizer","buf","bufPos","charBefore","charAfter","super","nextMatch","curFrom","curTo","prevMatchInRange","prevMatch","found","getReplacement","_result","matchAll","limit","highlight","add","regexpWordTest","findClusterBreak","_from","_to","size","result","m","l","n","setSearchQuery","togglePanel","searchState","SearchState","defaultQuery","effect","createSearchPanel","getSearchQuery","curState","searchPanelOpen","matchMark","selectedMatchMark","searchHighlighter","startState","builder","RangeSetBuilder","selected","finish","searchCommand","openSearchPanel","findNext","single","announceMatch","userEvent","selectSearchInput","findPrevious","prev","selectMatches","selectSelectionMatches","cur","replaceNext","readOnly","changes","replacement","toText","insert","announce","replaceAll","announceText","fallback","_b","_c","_d","_e","selText","getSearchInput","root","activeElement","searchInput","closeSearchPanel","contains","searchKeymap","key","run","scope","shift","commit","bind","searchField","placeholder","form","onchange","onkeyup","replaceField","caseField","checked","reField","wordField","button","content","keydown","runScopeHandlers","target","shiftKey","transactions","setQuery","mount","AnnounceMargin","Break","lineEnd","margin","marginRight","whiteSpace","Prec","low","crelt","elt","arguments","document","createElement","nodeType","Array","isArray","Object","hasOwnProperty","call","setAttribute","child","appendChild","createTextNode","RangeError"],"sourceRoot":""}